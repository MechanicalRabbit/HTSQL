#
# Copyright (c) 2006-2011, Prometheus Research, LLC
# See `LICENSE` for license information, `AUTHORS` for the list of authors.
#

title: Error Reporting
id: error
tests:

- title: Scan Errors
  tests:
  # % requires two hexdecimal digits
  - uri: /'?%@$'
    expect: 400
  # invalid UTF-8 sequence
  - uri: /'%FF'
    expect: 400
    ignore: true
  # no matching quote
  - uri: /'Hello
    expect: 400
  # unexpected symbol
  - uri: /`Hello'
    expect: 400

- title: Parse Errors
  tests:
  # expected the query end
  - uri: /'Hello','World'
    expect: 400
  # expected `/`
  - uri: school
    expect: 400
  # expected `/:<identifier>`
  - uri: /school/department
    expect: 400
    skip: true  # interpreted as division
  - uri: /school/:1
    expect: 400
  # expected `)`
  - uri: /school/:html(/program}
    expect: 400
  # expected `:<identifier>`
  - uri: /school:1
    expect: 400
  # expected `)`
  - uri: /school :as ('School'}
    expect: 400
  # expected `}`
  - uri: /school{code,name)
    expect: 400
  # expected `)`
  - uri: /count(school}
    expect: 400
  # unexpected end of query
  - uri: /school{code,name,
    expect: 400
  # unexpected symbol
  - uri: /school{code,,name}
    expect: 400
  # expected ')'
  - uri: /(2+2}
    expect: 400
  # expected '}'
  - uri: /{count(school))
    expect: 400

- title: Bind Errors
  tests:
  # empty selector
  - uri: /retrieve(/)
    expect: 400
  - uri: /{}
    expect: 400
  # invalid output column
  - uri: /department{school, code}
    expect: 400
  # invalid in-selector assignment
  - uri: /school{code, num_dept():=count(department)}
    expect: 400
  - uri: /school{code, department.num_course:=count(course)}
    expect: 400
  # invalid quotient column
  - uri: /department^school
    expect: 400
  - uri: /department^(num_course:=count(course))
    expect: 400
  # unbalanced columns
  - uri: /program.{school_code,code}->school{code}
    expect: 400
  # invalid pairs
  - uri: /program.{code}->course{no}
    expect: 400
  # invalid assignments
  - uri: /define((school).num_prog:=count(program)).true()
    expect: 400
  - uri: /define(true().school.num_prog:=count(program)).true()
    expect: 400
  - uri: /define(school.num_prog(1):=count(program)).true()
    expect: 400
  - uri: /define(school.(num_prog):=count(program)).true()
    expect: 400
  # invalid wildcard
  - uri: /{*}
    expect: 400
  - uri: /school?*1.5
    expect: 400
  - uri: /school?*5
    expect: 400
  # invalid reference
  - uri: /school?$code='art'
    expect: 400
  # invalid complement
  - uri: /school{code, count(^)}
    expect: 400
  # invalid names
  - uri: /invalid
    expect: 400
  - uri: /invalid()
    expect: 400
  - uri: /school :invalid
    expect: 400
  - uri: /define(invalid.value:=true()).invalid{value}
    expect: 400
  # ambiguous name
  - uri: /program.program
    expect: 400

- title: Lookup Hints
  tests:
  # invalid reference with a hint
  - uri: /school?code=$scool_code
          :where $school_code:='art'
    expect: 400
  # invalid reference with no hints
  - uri: /school?code=$code
          :where $school_code:='art'
    expect: 400
  # invalid reference with many hints
  - uri: /school?code=$scool_code
          :where ($school_code1:='art', $school_code2:='eng', $school_code3:='mus')
    expect: 400
  # invalid attribute; missing $
  - uri: /school?code=school_code
          :where $school_code:='art'
    expect: 400
  # invalid attribute; missing ()
  - uri: /school{code, count{department}}
    expect: 400
  # invalid attribute; local typo
  - uri: /school{code, count(depatrment)}
    expect: 400
  # invalid attribute; global typo
  - uri: /department?school.code==nulll
    expect: 400
  # invalid attribute; no hints
  - uri: /school{code, count(student)}
    expect: 400
  # invalid function; wrong number of arguments
  - uri: /program.define(student_by_year($year) := student?year(start_date)=$year)
            {code, count(student_by_year())}
    expect: 400
  - uri: /program.define(student_by_year($year) := student?year(start_date)=$year,
                         student_by_year() := student_by_year(2011))
            {code, count(student_by_year(2009,2010))}
    expect: 400
  # invalid function; extra ()
  - uri: /department{school(), code}
    expect: 400
  # invalid function; local typo
  - uri: /program.define(student_by_year($year) := student?year(start_date)=$year)
            {code, count(students_by_year(2010))}
    expect: 400
  # invalid function; global typo
  - uri: /cont(program)
    expect: 400
  # invalid function; no hints
  - uri: /program{code, count(student_by_year(2010))}
    expect: 400


