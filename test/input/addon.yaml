#
# Copyright (c) 2006-2011, Prometheus Research, LLC
# See `LICENSE` for license information, `AUTHORS` for the list of authors.
#

title: HTSQL Extensions
id: addon
tests:

# TWEAK - tweaks for HTSQL
- title: tweak
  tests:
  # Addon description
  - ctl: [ext, tweak]

# TWEAK.AUTOLIMIT - limit number of rows
- title: tweak.autolimit
  tests:
  # Addon description
  - ctl: [ext, tweak.autolimit]

  # Set limit=10000 (default)
  - load: demo
    extensions:
      tweak.autolimit: {}

  - uri: /{2+2}
  - uri: /school

  # Merging consecutive limits.
  - uri: /school.limit(10001)
  - uri: /school.limit(10000)
  - uri: /school.limit(9999)
  - uri: /program.limit(2,3)
  - uri: /program.limit(2,3).sort(title)
  - uri: /program.limit(2,3).school
  - uri: /program.limit(2,3).student

  # Set limit=5
  - load: demo
    extensions:
      tweak.autolimit: { limit: 5 }

  - uri: /{2+2}
  - uri: /school

  # Merging consecutive limits.
  - uri: /school.limit(6)
  - uri: /school.limit(5)
  - uri: /school.limit(4)
  - uri: /program.limit(2,3)
  - uri: /program.limit(2,3).sort(title)
  - uri: /program.limit(2,3).school
  - uri: /program.limit(2,3).student

  # Set limit=null
  - load: demo
    extensions:
      tweak.autolimit: { limit: null }

  - uri: /{2+2}
  - uri: /school

# TWEAK.CORS - cross-origin resource sharing
- title: tweak.cors
  tests:
  # Addon description
  - ctl: [ext, tweak.cors]

  # Set origin=* (default)
  - load: demo
    extensions:
      tweak.cors: {}
  - uri: /school

  # Set origin=http://demo.htsql.org
  - load: demo
    extensions:
      tweak.cors: { origin: 'http://demo.htsql.org' }
  - uri: /school

  # Set origin=null
  - load: demo
    extensions:
      tweak.cors: { origin: null }
  - uri: /school

# TWEAK.INET - IPv4 data type
- title: tweak.inet
  ifdef: pgsql
  tests:
  # Addon description
  - ctl: [ext, tweak.inet]

  # Use the `edge` database to get `other{inet}`
  - load: edge
    extensions:
      tweak.inet: {}

  # Introspection and conversion
  - uri: /other{code, inet+, inet(inet), string(inet), integer(inet)}

  # Conversions
  - uri: /{inet('127.0.0.1')}
  - uri: /{inet(string('127.0.0.1')), inet(2130706433)}
  - uri: /{string(inet('127.0.0.1')), integer(inet('127.0.0.1'))}

  # Invalid literals and conversions
  - uri: /{inet('HTSQL')}
    expect: 400
  - uri: /{inet(string('HTSQL'))}
    expect: 409
  - uri: /{inet(-1)}
    expect: 409

  # Comparison
  - uri: /{inet('192.168.24.1')=inet('192.168.24.1'),
           inet('192.168.24.1')!=inet('192.168.12.10'),
           inet('192.168.24.1')>inet('192.168.12.10')}

  # Arithmetics
  - uri: /{inet('192.168.12.10')+3063,
           inet('192.168.24.1')-3063,
           inet('192.168.24.1')-inet('192.168.12.10')}

# TWEAK.META - meta database
- title: tweak.meta
  tests:
  # Addon description
  - ctl: [ext, tweak.meta]

  # Load the addon
  - load: demo
    extensions:
      tweak.meta: {}

  # Tables
  - uri: /table/:meta
  - uri: /field/:meta
  - uri: /column/:meta
  - uri: /link/:meta

  # Links
  - uri: /(table?name='department').field/:meta
  - uri: /(table?name='department').column/:meta
  - uri: /(table?name='department').link/:meta
  - uri: /(table?name='department').link_via_target/:meta
  - uri: /(field?table_name='school').table/:meta
  - uri: /(field?table_name='school').column/:meta
  - uri: /(field?table_name='school').link/:meta
  - uri: /(column?table_name='program').table/:meta
  - uri: /(column?table_name='program').field/:meta
  - uri: /(link?table_name='student').table/:meta
  - uri: /(link?table_name='student').target/:meta
  - uri: /(link?table_name='student').field/:meta
  - uri: /(link?table_name='student').reverse/:meta
  - uri: /(link?table_name='student').link_via_reverse/:meta

  # Links and cardinality
  - uri: /table?name='department'
            {name, count(field), count(column),
             count(link), count(link_via_target)}
         /:meta
  - uri: /field?table_name='school'
            {table{name}, name, kind, column{domain}, link{is_singular}}
         /:meta
  - uri: /column?table_name='program'
            {table{name}, field{name, sort}}
         /:meta
  - uri: /link?table_name='student'
            {table{name}, target{name}, field{name},
             reverse{name}, link_via_reverse{name}}
         /:meta

  # Scalar queries
  - uri: /count(table)/:meta
  # Alternative syntax
  - uri: /meta(/count(table))

  # Meta-meta database
  - uri: /table/:meta/:meta
  - uri: /field/:meta/:meta
  - uri: /column/:meta/:meta
  - uri: /link/:meta/:meta

  # Invalid queries
  - uri: /meta()
    expect: 400
  - uri: /meta(/column,/link)
    expect: 400
  - uri: /meta(/schema)
    expect: 400
  - uri: /meta(table)
    expect: 400

  # Describe columns of the `type` database
  - load: edge
    extensions:
      tweak.meta: {}
  - uri: /meta(/column.sort(table.name, field.sort))

# TWEAK.OVERRIDE - adjust database metadata
- title: tweak.override
  tests:
  # Addon description
  - ctl: [ext, tweak.override]

  # Test `included-tables`
  - load: demo
    extensions:
      tweak.override:
        included-tables: [school, program]
  - uri: /avg(school.count(program))
  - uri: /avg(school.count(department))
    expect: 400

  # Test `excluded-tables`
  - load: demo
    extensions:
      tweak.override:
        excluded-tables: [department, course]
  - uri: /avg(school.count(program))
  - uri: /avg(school.count(department))
    expect: 400

  # Test `included-tables` and `excluded-tables` together
  - load: demo
    extensions:
      tweak.override:
        included-tables: [school, program, department, course]
        excluded-tables: [department, course]
  - uri: /avg(school.count(program))
  - uri: /avg(school.count(department))
    expect: 400

  # Test schema qualifiers
  - load: demo
    extensions:
      tweak.override:
        included-tables: [ad.*]
    ifdef: [pgsql, mssql]
  - uri: /count(program)
    ifdef: [pgsql, mssql]
  - uri: /count(student)
    expect: 400
    ifdef: [pgsql, mssql]

  # Test `included-columns`
  - load: demo
    extensions:
      tweak.override:
        included-columns: ["*code", "*name"]
  - uri: /school{code, count(department)}
  - uri: /student{name, count(enrollment)}
    expect: 400

  # Test `excluded-columns`
  - load: demo
    extensions:
      tweak.override:
        excluded-columns: [confidential.ssn]
  - uri: /max(confidential.pay_grade)
  - uri: /confidential.ssn
    expect: 400

  # Test `not-nulls`, `unique-keys` and `foreign-keys`
  - load: demo
    extensions:
      tweak.override:
        not-nulls: [student.school_code, student.program_code]
        unique-keys:
          - student(name, dob)!
        foreign-keys:
          - student(school_code) -> school
          - student(name)? -> instructor(full_name)
  - uri: /student{name, dob, school.code, program.code, exists(instructor)}.limit(1)

  # Test `class-labels`
  - load: demo
    extensions:
      tweak.override:
        class-labels:
          c14n: classification
          campus: (school^campus)
  - uri: /count(c14n)
  - uri: /campus{campus, count(school)}
  - uri: /classification
    expect: 400

  # Test `field-labels` and `field-orders`
  - load: demo
    extensions:
      tweak.override:
        field-labels:
          program.includes: program -> program(*, part_of_code)
          student.full_name: name
          student.class: student -> enrollment, enrollment -> class
          student.avg_grade: (avg(enrollment.grade))
        field-orders:
          student: [full_name, gender, dob, avg_grade]
          program: [code, title, degree]
  - uri: /program?exists(includes)
  - uri: /program?exists(program_via_part_of)
    expect: 400
  - uri: /student?count(class)>55
  - uri: /student.name
    expect: 400

  # Test `unlabeled_tables` and `unlabeled_columns`
  - load: demo
    extensions:
      tweak.override:
        field-labels:
          student.class: student -> enrollment, enrollment -> class
        unlabeled-tables: [enrollment]
        unlabeled-columns: [id]
  - uri: /student{name}?count(class)>55
  - uri: /enrollment
    expect: 400
  - uri: /student.enrollment
    expect: 400
  - uri: /student.id
    expect: 400

# TWEAK.RESOURCE - serve static files
- title: tweak.resource
  tests:
  # Addon description
  - ctl: [ext, tweak.resource]

  # We can only test for `Not Found` error
  - load: demo
    extensions:
      tweak.resource: {}
  - uri: /-/not-found
    expect: 404

  # Non-standard prefix
  - load: demo
    extensions:
      tweak.resource:
        indicator: ;)
  - uri: /-/not-found
    expect: 400
  - uri: /;)/not-found
    expect: 404


