#
# Copyright (c) 2006-2010, Prometheus Research, LLC
# Authors: Clark C. Evans <cce@clarkevans.com>,
#          Kirill Simonov <xi@resolvent.net>
#

title: PostgreSQL regression tests
id: pgsql
output: test/output/pgsql.yaml
tests:
# FIXME: need a regression schema and a set of tests.

- title: Remove any existing regression database
  id: cleanup-pgsql
  tests:
  - connect: &admin-connect
      engine: pgsql
      database: postgres
      username: ${PGSQL_ADMIN_USERNAME}
      password: ${PGSQL_ADMIN_PASSWORD}
      host: ${PGSQL_HOST}
      port: ${PGSQL_PORT}
    sql: |
        DROP DATABASE IF EXISTS "htsql_regress";
        DROP ROLE IF EXISTS "htsql_regress";
    autocommit: true

- title: Deploy the regression database
  id: setup-pgsql
  tests:
  - connect: *admin-connect
    sql: |
        CREATE DATABASE "htsql_regress" WITH ENCODING = 'UTF-8';
        CREATE ROLE "htsql_regress" WITH LOGIN PASSWORD 'secret';
        ALTER DATABASE "htsql_regress" OWNER TO "htsql_regress";
    autocommit: true
  - connect: &connect
      engine: pgsql
      database: htsql_regress
      username: htsql_regress
      password: secret
      host: ${PGSQL_HOST}
      port: ${PGSQL_PORT}
    sql-include: test/sql/regress-pgsql.sql

- db: *connect

- title: Queries
  id: queries-pgsql
  tests:

  # Display all tables in the regression schema.
  - title: Regression schema
    tests:
    - uri: /school
    - uri: /department
    - uri: /program
    - uri: /course
    - uri: /instructor
    - uri: /confidential
    - uri: /appointment
    - uri: /semester
    - uri: /class
    - uri: /student
    - uri: /enrollment
    - uri: /prerequisite
    - uri: /classification
    - uri: /course_classification
    - uri: /program_requirement

  # Empty and scalar queries.
  - title: Scalar queries
    tests:
    - uri: /
    - uri: /{'HT'+'SQL'}

    - title: Literals
      tests:
      # String literals.
      - uri: /{'','HTSQL','O''Reilly','λόγος',
               '%01%02%03%04%05%06%07%08%09%0A%0B%0C%0D%0E%0F',
               '%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F'}
      # Integer literals.
      - uri: /{0,1,100,65536}
      # Invalid integer literal (must be in range from -2**63 to 2**63-1).
      - uri: /{115792089237316195423570985008687907853269984665640564039457584007913129639936}
        expect: 400
      # Decimal literals.
      - uri: /{0.0,1.0,3.14,0.00000000001,1234567890.0987654321}
      # Decimal values are of arbitrary size.
      - uri: /{10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.1}
      # Float literals.
      - uri: /{0e0,1e1,0.31415926535897931e1,2718281828459045e-16}
      # Invalid float literal (inf).
      - uri: /{1e1024}
        expect: 400

    - title: Scalar functions
      tests:
      - title: Boolean constants and logical operators
        tests:
        # Boolean constants.
        - uri: /{true(),false()}
        # Boolean->Boolean cast (identity).
        - uri: /{boolean(null()),boolean(true()),boolean(false())}
        # Untyped boolean values.
        - uri: /{boolean('true'),boolean('TRUE'),boolean('True'),
                 boolean('false'),boolean('FALSE'),boolean('False')}
        # Invalid untyped boolean values.
        - uri: /{boolean('')}
          expect: 400
        - uri: /{boolean('X')}
          expect: 400
        # Number->Boolean cast (null => false, otherwise => true).
        - uri: /{boolean(integer(null())),boolean(0),boolean(1),
                 boolean(0.0),boolean(1.0),boolean(0e0),boolean(1e0)}
        # String->Boolean cast (null, '' => false, otherwise => true).
        - uri: /{boolean(string(null())),boolean(string('')),boolean(string('X')),
                 boolean(string('true')),boolean(string('false'))}
               # Note: boolean(string('false')) => true
        # The AND operator.
        - uri: /{false()&false(),false()&true(),true()&false(),true()&true(),
                 null()&false(),null()&true(),null()&null()}
        # Auto-cast of arguments (false,true).
        - uri: /{string('')&string('X'),0&1}
        # Auto-cast of NULL values (null,false,false).
        - uri: /{null()&null(),integer(null())&null(),integer(null())&integer(null())}
        # The OR operator.
        - uri: /{false()|false(),false()|true(),true()|false(),true()|true(),
                 null()|false(),null()|true(),null()|null()}
        # Auto-cast of arguments (true,true,false).
        - uri: /{string('')|string('X'),0|1,integer(null())|string(null())}
        # The NOT operator.
        - uri: /{!true(),!false(),!null()}
        # Auto-cast of arguments (true,false,false,true).
        - uri: /{!string(''),!string('X'),!1,!integer(null())}

      - title: Comparison functions and operators
        tests:
        # Is NULL function (null => true, otherwise => false).
        - uri: /{is_null(null()),is_null(true()),is_null(''),is_null(0)}
        # Null If method (`this` is equal to one of the arguments => null, otherwise => `this`).
        - uri: /{'Y'.null_if('X'),'Y'.null_if('Y'),
                 (5).null_if(1,2,3),(5).null_if(1,2,3,4,5,6,7,8,9,10),
                 null().null_if(null()),null().null_if('X')}
        # If Null method (`this` is null => the first non-null argument, otherwise => `this`).
        - uri: /{'X'.if_null('Y'),null().if_null('X'),null().if_null(null()),
                 null().if_null(null(),null(),null()),
                 null().if_null(null(),null(),0),
                 null().if_null(0,1,2,3,null())}
        # If function (if(`cond1`,`then1`,[`cond2`,`then2`,...],[`else`])).
        - uri: /{if(true(),1),if(false(),1),if(null(),1),
                 if(true(),1,0),if(false(),1,0),if(null(),1,0),
                 if(true(),1,true(),2),if(true(),1,false(),2),
                 if(false(),1,true(),2),if(false(),1,false(),2),
                 if(false(),1,false(),2,0)}
        # Switch function (switch(`token`,`case1`,`then1`,[`case2`,`then2`,...],[`else`])).
        - uri: /{switch('Y','X',1),switch('Y','Y',1),
                 switch('Y','X',1,0),switch('Y','Y',1,0),
                 switch(null(),null(),1,0),
                 switch('Y','X',1,'Y',2,'Z',3),
                 switch('Y','A',1,'B',2,'C',3,0)}
        # Equality/Inequality.
        - uri: /{1=1,1=0,1=null(),null()=null(),
                 1!=1,1!=0,1!=null(),null()!=null(),
                 1==1,1==0,1==null(),null()==null(),
                 1!==1,1!==0,1!==null(),null()!==null()}
        - uri: /{'X'='X',1=1.0,1=1e0,1.0=1e0,1='1'}
        - uri: /{integer('1')=string('1')}
          expect: 400
        # Less Than/Greater Than.
        - uri: /{'X'<'Y','X'<='Y','X'>'Y','X'>='Y',
                 'X'<null(),'X'<=null(),'X'>null(),'X'>=null()}
        - uri: /{1<2,1<=2,1>2,1>=2,
                 1<2.0,1<=2.0,1>2.0,1>=2.0,
                 1e0<2.0,1e0<=2.0,1e0>2.0,1e0>2.0}
        - uri: /{integer('1')<string('1')}
          expect: 400

      - title: Numeric functions and operators
        tests:
        # Addition.
        - uri: /{2+2,2+2.0,2+2e0,2.0+2.0,2.0+2e0,2e0+2e0}
        # Subtraction.
        - uri: /{2-1,2-1.0,2-1e0,2.0-1.0,2.0-1e0,2e0-1e0}
        # Multiplication.
        - uri: /{5*5,5*5.0,5*5e0,5.0*5.0,5.0*5e0,5e0*5e0}
        # Division.
        - uri: /{1 div 2,1 div 2.0,1 div 2e0,1.0 div 2.0,1.0 div 2e0, 1e0 div 2e0}
        # Division by zero.
        - uri: /{1 div 0}
          expect: 409
        # Addition: invalid types.
        - uri: /{1+'1'}
          expect: 400
        # Multiplication: overflow.
        - uri: /{65536*65536}
          expect: 409

  # Simple (non-aggregate) filters.
  - title: Simple filters
    tests:
    - uri: /school?code='ns'
    - uri: /department?school.code='ns'
    - uri: /program?school.code='ns'&code='uchem'
    - uri: /course?credits=5

  # Simple (non-aggregate) selectors.
  - title: Simple selectors
    tests:
    - uri: /school{name}
    - uri: /department{school.*,*}
    - uri: /department{school.name+' - '+name}

  # Plural links and aggregates.
  - title: Aggregates
    tests:
    - uri: /{count(school),count(department),count(course)}
    - uri: /{count(department),count(department?exists(course))}
    - uri: /department{code,count(course{credits=3})}
    - uri: /school{code,count(department.course{credits=3})}
    - uri: /school{code}?count(department.course{credits=3})=20
    - uri: /department?exists(course.credits=5)
    - uri: /department?every(course.credits=5)
    - uri: /department{code,min(course.credits),max(course.credits)}
    - uri: /department?exists(course)
    - uri: /school?!exists(department)
    - uri: /school{*,count(department)}
    - uri: /school{*,count(department?exists(course))}
    - uri: /school{*,count(department.exists(course))}

  # Demonstrate selection of a formatter based on the `Accept` header.
  - title: Formatters
    tests:
    - uri: /school
      headers:
        Accept: application/json
    - uri: /school
      headers:
        Accept: text/csv
    - uri: /school
      headers:
        Accept: text/plain
    - uri: /school
      headers:
        Accept: text/html

